import oracleDbManager from './OracleDbManager.js'
import logger from '../utils/logger.js'

const createTableSQL = {
    // Таблиці
    users: `
        CREATE TABLE USERS (
            USER_ID                 NUMBER(10)      GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
            USERNAME                VARCHAR2(50)    NOT NULL UNIQUE,
            EMAIL                   VARCHAR2(100)   NOT NULL UNIQUE,
            PASSWORD_HASH           VARCHAR2(255)   NOT NULL,
            SALT                    VARCHAR2(255),
            FIRST_NAME              VARCHAR2(50),
            LAST_NAME               VARCHAR2(50),
            IS_ACTIVE               NUMBER(1)       DEFAULT 1 NOT NULL,
            IS_EMAIL_VERIFIED       NUMBER(1)       DEFAULT 0 NOT NULL, -- Додано
            CREATED_AT              TIMESTAMP       DEFAULT SYSTIMESTAMP NOT NULL,
            UPDATED_AT              TIMESTAMP       DEFAULT SYSTIMESTAMP NOT NULL,
            DELETED_AT              TIMESTAMP,
            LAST_LOGIN_AT           TIMESTAMP,
            TWO_FACTOR_SECRET       VARCHAR2(255),
            VERIFICATION_CODE       VARCHAR2(64),
            VERIFICATION_EXPIRATION TIMESTAMP,
            PASSWORD_RESET_TOKEN    VARCHAR2(64),
            PASSWORD_RESET_EXPIRATION TIMESTAMP
        )
    `,
    roles: `
        CREATE TABLE ROLES (
            ROLE_ID                 NUMBER(10)      GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
            ROLE_NAME               VARCHAR2(50)    NOT NULL UNIQUE,
            DESCRIPTION             VARCHAR2(255),
            CREATED_AT              TIMESTAMP       DEFAULT SYSTIMESTAMP NOT NULL,
            UPDATED_AT              TIMESTAMP       DEFAULT SYSTIMESTAMP NOT NULL
        )
    `,
    user_roles: `
        CREATE TABLE USER_ROLES (
            USER_ROLE_ID            NUMBER(10)      GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
            USER_ID                 NUMBER(10)      NOT NULL,
            ROLE_ID                 NUMBER(10)      NOT NULL,
            ASSIGNED_AT             TIMESTAMP       DEFAULT SYSTIMESTAMP NOT NULL,
            IS_ACTIVE               NUMBER(1)       DEFAULT 1 NOT NULL,

            CONSTRAINT FK_USER_ROLES_USER FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
            CONSTRAINT FK_USER_ROLES_ROLE FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ROLE_ID) ON DELETE CASCADE,
            CONSTRAINT UK_USER_ROLES UNIQUE (USER_ID, ROLE_ID)
        )
    `,
    refresh_tokens: `
        CREATE TABLE REFRESH_TOKENS (
            TOKEN_ID                NUMBER(10)      GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
            USER_ID                 NUMBER(10)      NOT NULL,
            TOKEN                   VARCHAR2(512)   NOT NULL UNIQUE,
            EXPIRATION_DATE         TIMESTAMP       NOT NULL,
            CREATED_AT              TIMESTAMP       DEFAULT SYSTIMESTAMP NOT NULL,
            IP_ADDRESS              VARCHAR2(45),
            USER_AGENT              VARCHAR2(255),
            IS_REVOKED              NUMBER(1)       DEFAULT 0 NOT NULL,

            CONSTRAINT FK_REFRESH_TOKENS_USER FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE
        )
    `,
    // Індекси
    idx_users_username: `CREATE INDEX IDX_USERS_USERNAME ON USERS (USERNAME)`,
    idx_users_email: `CREATE INDEX IDX_USERS_EMAIL ON USERS (EMAIL)`,
    idx_users_deleted_at: `CREATE INDEX IDX_USERS_DELETED_AT ON USERS (DELETED_AT)`,
    idx_roles_role_name: `CREATE INDEX IDX_ROLES_ROLE_NAME ON ROLES (ROLE_NAME)`,
    idx_user_roles_user_id: `CREATE INDEX IDX_USER_ROLES_USER_ID ON USER_ROLES (USER_ID)`,
    idx_user_roles_role_id: `CREATE INDEX IDX_USER_ROLES_ROLE_ID ON USER_ROLES (ROLE_ID)`,
    idx_refresh_tokens_user_id: `CREATE INDEX IDX_REFRESH_TOKENS_USER_ID ON REFRESH_TOKENS (USER_ID)`,

    // Коментарі до таблиць
    comment_users: `COMMENT ON TABLE USERS IS 'Таблиця для зберігання інформації про користувачів системи з підтримкою м''якого видалення.'`,
    comment_col_users_user_id: `COMMENT ON COLUMN USERS.USER_ID IS 'Унікальний ідентифікатор користувача.'`,
    comment_col_users_username: `COMMENT ON COLUMN USERS.USERNAME IS 'Ім''я користувача (логін) для входу.'`,
    comment_col_users_email: `COMMENT ON COLUMN USERS.EMAIL IS 'Електронна пошта користувача, використовується для входу та відновлення пароля.'`,
    comment_col_users_password_hash: `COMMENT ON COLUMN USERS.PASSWORD_HASH IS 'Хеш пароля користувача.'`,
    comment_col_users_salt: `COMMENT ON COLUMN USERS.SALT IS 'Сіль для хешування пароля.'`,
    comment_col_users_first_name: `COMMENT ON COLUMN USERS.FIRST_NAME IS 'Ім''я користувача.'`,
    comment_col_users_last_name: `COMMENT ON COLUMN USERS.LAST_NAME IS 'Прізвище користувача.'`,
    comment_col_users_is_active: `COMMENT ON COLUMN USERS.IS_ACTIVE IS 'Статус активності облікового запису (1 - активний, 0 - неактивний).'`,
    comment_col_users_is_email_verified: `COMMENT ON COLUMN USERS.IS_EMAIL_VERIFIED IS 'Статус підтвердження електронної пошти (1 - підтверджено, 0 - не підтверджено).'`,
    comment_col_users_created_at: `COMMENT ON COLUMN USERS.CREATED_AT IS 'Дата і час створення облікового запису.'`,
    comment_col_users_updated_at: `COMMENT ON COLUMN USERS.UPDATED_AT IS 'Дата і час останнього оновлення облікового запису.'`,
    comment_col_users_deleted_at: `COMMENT ON COLUMN USERS.DELETED_AT IS 'Дата і час м''якого видалення облікового запису. NULL, якщо обліковий запис не видалено.'`,
    comment_col_users_last_login_at: `COMMENT ON COLUMN USERS.LAST_LOGIN_AT IS 'Дата і час останнього входу користувача.'`,
    comment_col_users_two_factor_secret: `COMMENT ON COLUMN USERS.TWO_FACTOR_SECRET IS 'Секрет для двофакторної аутентифікації.'`,
    comment_col_users_verification_code: `COMMENT ON COLUMN USERS.VERIFICATION_CODE IS 'Код для верифікації електронної пошти.'`,
    comment_col_users_verification_expiration: `COMMENT ON COLUMN USERS.VERIFICATION_EXPIRATION IS 'Термін дії коду верифікації.'`,
    comment_col_users_password_reset_token: `COMMENT ON COLUMN USERS.PASSWORD_RESET_TOKEN IS 'Токен для скидання пароля.'`,
    comment_col_users_password_reset_expiration: `COMMENT ON COLUMN USERS.PASSWORD_RESET_EXPIRATION IS 'Термін дії токена скидання пароля.'`,

    comment_roles: `COMMENT ON TABLE ROLES IS 'Таблиця для визначення доступних ролей в системі.'`,
    comment_col_roles_role_id: `COMMENT ON COLUMN ROLES.ROLE_ID IS 'Унікальний ідентифікатор ролі.'`,
    comment_col_roles_role_name: `COMMENT ON COLUMN ROLES.ROLE_NAME IS 'Назва ролі (наприклад, admin, editor).'`,
    comment_col_roles_description: `COMMENT ON COLUMN ROLES.DESCRIPTION IS 'Опис ролі.'`,
    comment_col_roles_created_at: `COMMENT ON COLUMN ROLES.CREATED_AT IS 'Дата і час створення ролі.'`,
    comment_col_roles_updated_at: `COMMENT ON COLUMN ROLES.UPDATED_AT IS 'Дата і час останнього оновлення ролі.'`,

    comment_user_roles: `COMMENT ON TABLE USER_ROLES IS 'Проміжна таблиця для зв''язку користувачів з ролями (багато-до-багатьох).'`,
    comment_col_user_roles_user_role_id: `COMMENT ON COLUMN USER_ROLES.USER_ROLE_ID IS 'Унікальний ідентифікатор зв''язку ролі користувача.'`,
    comment_col_user_roles_user_id: `COMMENT ON COLUMN USER_ROLES.USER_ID IS 'Ідентифікатор користувача.'`,
    comment_col_user_roles_role_id: `COMMENT ON COLUMN USER_ROLES.ROLE_ID IS 'Ідентифікатор ролі.'`,
    comment_col_user_roles_assigned_at: `COMMENT ON COLUMN USER_ROLES.ASSIGNED_AT IS 'Дата і час призначення ролі користувачеві.'`,
    comment_col_user_roles_is_active: `COMMENT ON COLUMN USER_ROLES.IS_ACTIVE IS 'Статус активності цієї конкретної ролі для користувача.'`,

    comment_refresh_tokens: `COMMENT ON TABLE REFRESH_TOKENS IS 'Таблиця для зберігання refresh-токенів користувачів.'`,
    comment_col_refresh_tokens_token_id: `COMMENT ON COLUMN REFRESH_TOKENS.TOKEN_ID IS 'Унікальний ідентифікатор refresh-токена.'`,
    comment_col_refresh_tokens_user_id: `COMMENT ON COLUMN REFRESH_TOKENS.USER_ID IS 'Ідентифікатор користувача, якому належить refresh-токен.'`,
    comment_col_refresh_tokens_token: `COMMENT ON COLUMN REFRESH_TOKENS.TOKEN IS 'Сам refresh-токен (хешований).'`,
    comment_col_refresh_tokens_expiration_date: `COMMENT ON COLUMN REFRESH_TOKENS.EXPIRATION_DATE IS 'Дата і час закінчення дії refresh-токена.'`,
    comment_col_refresh_tokens_created_at: `COMMENT ON COLUMN REFRESH_TOKENS.CREATED_AT IS 'Дата і час створення refresh-токена.'`,
    comment_col_refresh_tokens_ip_address: `COMMENT ON COLUMN REFRESH_TOKENS.IP_ADDRESS IS 'IP-адреса, з якої був виданий токен.'`,
    comment_col_refresh_tokens_user_agent: `COMMENT ON COLUMN REFRESH_TOKENS.USER_AGENT IS 'User-Agent, з якого був виданий токен.'`,
    comment_col_refresh_tokens_is_revoked: `COMMENT ON COLUMN REFRESH_TOKENS.IS_REVOKED IS 'Статус відкликання токена (1 - відкликаний, 0 - активний).'`,
}

/**
 * Створює всі необхідні таблиці в базі даних.
 */
export async function createTables() {
    logger.info('Starting database table creation...')

    const tableOrder = [
        'users',
        'roles',
        'user_roles', // Залежить від USERS та ROLES
        'refresh_tokens', // Залежить від USERS
    ]

    const indexOrder = [
        'idx_users_username',
        'idx_users_email',
        'idx_users_deleted_at',
        'idx_roles_role_name',
        'idx_user_roles_user_id',
        'idx_user_roles_role_id',
        'idx_refresh_tokens_user_id',
    ]

    const commentOrder = [
        'comment_users',
        'comment_col_users_user_id',
        'comment_col_users_username',
        'comment_col_users_email',
        'comment_col_users_password_hash',
        'comment_col_users_salt',
        'comment_col_users_first_name',
        'comment_col_users_last_name',
        'comment_col_users_is_active',
        'comment_col_users_is_email_verified',
        'comment_col_users_created_at',
        'comment_col_users_updated_at',
        'comment_col_users_deleted_at',
        'comment_col_users_last_login_at',
        'comment_col_users_two_factor_secret',
        'comment_col_users_verification_code',
        'comment_col_users_verification_expiration',
        'comment_col_users_password_reset_token',
        'comment_col_users_password_reset_expiration',

        'comment_roles',
        'comment_col_roles_role_id',
        'comment_col_roles_role_name',
        'comment_col_roles_description',
        'comment_col_roles_created_at',
        'comment_col_roles_updated_at',

        'comment_user_roles',
        'comment_col_user_roles_user_role_id',
        'comment_col_user_roles_user_id',
        'comment_col_user_roles_role_id',
        'comment_col_user_roles_assigned_at',
        'comment_col_user_roles_is_active',

        'comment_refresh_tokens',
        'comment_col_refresh_tokens_token_id',
        'comment_col_refresh_tokens_user_id',
        'comment_col_refresh_tokens_token',
        'comment_col_refresh_tokens_expiration_date',
        'comment_col_refresh_tokens_created_at',
        'comment_col_refresh_tokens_ip_address',
        'comment_col_refresh_tokens_user_agent',
        'comment_col_refresh_tokens_is_revoked',
    ]

    for (const tableName of tableOrder) {
        try {
            await oracleDbManager.execute(createTableSQL[tableName])
            logger.info(`Table '${tableName.toUpperCase()}' created successfully.`)
        } catch (error) {
            if (error.oracleErrorNum === 955) {
                // ORA-00955: name is already used by an existing object
                logger.warn(`Table '${tableName.toUpperCase()}' already exists. Skipping creation.`)
            } else {
                logger.error(
                    `Error creating table '${tableName.toUpperCase()}': ${error.message}`,
                    { error },
                )
                throw error // Зупиняємо, якщо є критична помилка
            }
        }
    }

    for (const indexName of indexOrder) {
        try {
            await oracleDbManager.execute(createTableSQL[indexName])
            logger.info(`Index '${indexName.toUpperCase()}' created successfully.`)
        } catch (error) {
            if (error.oracleErrorNum === 955) {
                logger.warn(`Index '${indexName.toUpperCase()}' already exists. Skipping creation.`)
            } else {
                logger.error(
                    `Error creating index '${indexName.toUpperCase()}': ${error.message}`,
                    { error },
                )
                throw error
            }
        }
    }

    for (const commentName of commentOrder) {
        try {
            await oracleDbManager.execute(createTableSQL[commentName])
            logger.info(`Comment for '${commentName}' added successfully.`)
        } catch (error) {
            logger.error(`Error adding comment for '${commentName}': ${error.message}`, {
                error,
            })
            // Не зупиняємо процес через помилку коментаря, це не критично для функціоналу
        }
    }

    logger.info('Database table creation process completed.')
}

// Додайте метод для видалення таблиць (для розробки/тестування)
export async function dropTables() {
    logger.warn('Starting database table dropping...')
    const reverseTableOrder = ['REFRESH_TOKENS', 'USER_ROLES', 'ROLES', 'USERS'] // Зворотний порядок для коректного видалення з урахуванням FK

    for (const tableName of reverseTableOrder) {
        try {
            await oracleDbManager.execute(`DROP TABLE ${tableName} CASCADE CONSTRAINTS`)
            logger.info(`Table '${tableName}' dropped successfully.`)
        } catch (error) {
            if (error.oracleErrorNum === 942) {
                // ORA-00942: table or view does not exist
                logger.warn(`Table '${tableName}' does not exist. Skipping drop.`)
            } else {
                logger.error(`Error dropping table '${tableName}': ${error.message}`, {
                    error,
                })
                // Не зупиняємо, спробуємо видалити інші таблиці
            }
        }
    }
    logger.warn('Database table dropping process completed.')
}
