import oracledb from 'oracledb'
import fs from 'fs/promises'
import path from 'path'

// --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø ---
const DB_CONFIG = {
    user: 'YOUR_USER',
    password: 'YOUR_PASSWORD',
    connectString: 'HOST:PORT/SERVICE_NAME',
}

const ROOT_DIR = path.resolve('C:\\path\\to\\images')
const TABLE_NAME = 'IMAGES_TABLE'
const BATCH_SIZE = 100 // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∑–∞ –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é/–≤–∏–∫–ª–∏–∫

oracledb.autoCommit = false // –í–∏–º–∏–∫–∞—î–º–æ –∞–≤—Ç–æ-–∫–æ–º—ñ—Ç, —â–æ–± –∫–µ—Ä—É–≤–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—î—é –≤—Ä—É—á–Ω—É

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤.
 */
async function run() {
    let connection
    // –ú–∞—Å–∏–≤ –¥–ª—è –∑–±–æ—Ä—É –≤—Å—ñ—Ö binds –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ—ó –≤—Å—Ç–∞–≤–∫–∏
    let bindsArray = []
    let filesProcessed = 0

    try {
        console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...')
        connection = await oracledb.getConnection(DB_CONFIG)
        console.log('–£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ.')

        // SQL-–∑–∞–ø–∏—Ç –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —ñ–º–µ–Ω–æ–≤–∞–Ω–∏–º, –∞–ª–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏–º–µ—Ç—å—Å—è –ø–∞–∫–µ—Ç–Ω–æ
        const sql = `
            INSERT INTO ${TABLE_NAME} (z_id, x_id, y_id, image)
            VALUES (:z_val, :x_val, :y_val, :image_val)
        `

        // ... (–õ–æ–≥—ñ–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏) ...
        const z_dirs = await fs.readdir(ROOT_DIR, { withFileTypes: true })

        for (const z_dirent of z_dirs) {
            if (!z_dirent.isDirectory()) continue
            const z_id = z_dirent.name
            const z_path = path.join(ROOT_DIR, z_id)

            const x_dirs = await fs.readdir(z_path, { withFileTypes: true })

            for (const x_dirent of x_dirs) {
                if (!x_dirent.isDirectory()) continue
                const x_id = x_dirent.name
                const x_path = path.join(z_path, x_id)

                const files = await fs.readdir(x_path)

                for (const filename of files) {
                    if (path.extname(filename).toLowerCase() === '.png') {
                        const full_path = path.join(x_path, filename)
                        const y_id = path.parse(filename).name

                        const image_data = await fs.readFile(full_path)

                        // –ó–±–∏—Ä–∞—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –ø—Ä–∏–≤'—è–∑–æ–∫
                        const bindItem = {
                            z_val: z_id,
                            x_val: x_id,
                            y_val: y_id,
                            image_val: image_data,
                        }

                        bindsArray.push(bindItem)
                        filesProcessed++

                        // ‚≠êÔ∏è –£–º–æ–≤–∞ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ—ó –≤—Å—Ç–∞–≤–∫–∏ (Batching)
                        if (bindsArray.length >= BATCH_SIZE) {
                            console.log(
                                `\nüì¶ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–∞–∫–µ—Ç–Ω–æ—ó –≤—Å—Ç–∞–≤–∫–∏ ${bindsArray.length} —Ñ–∞–π–ª—ñ–≤...`,
                            )

                            // ‚≠êÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ executeMany
                            await connection.executeMany(sql, bindsArray)
                            await connection.commit() // –ö–æ–º—ñ—Ç –ø–∞–∫–µ—Ç—É

                            console.log(
                                `   –£—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–∞ –∑–∞–∫–æ–º—ñ—á–µ–Ω–æ ${bindsArray.length} —Ä—è–¥–∫—ñ–≤.`,
                            )

                            // –û—á–∏—â—É—î–º–æ –º–∞—Å–∏–≤ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∞–∫–µ—Ç—É
                            bindsArray = []
                        }
                    }
                }
            }
        }

        // ‚≠êÔ∏è –û–±—Ä–æ–±–∫–∞ –∑–∞–ª–∏—à–∫—É (Last Batch)
        if (bindsArray.length > 0) {
            console.log(`\nüì¶ –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó –ø–∞–∫–µ—Ç–Ω–æ—ó –≤—Å—Ç–∞–≤–∫–∏ ${bindsArray.length} —Ñ–∞–π–ª—ñ–≤...`)
            await connection.executeMany(sql, bindsArray)
            await connection.commit()
            console.log(`   –£—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–∞ –∑–∞–∫–æ–º—ñ—á–µ–Ω–æ ${bindsArray.length} —Ä—è–¥–∫—ñ–≤.`)
        }

        console.log(`\n‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å—å–æ–≥–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: ${filesProcessed} —Ñ–∞–π–ª—ñ–≤.`)
    } catch (err) {
        console.error('\n‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞:', err)
        // –í—ñ–¥–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        if (connection) {
            await connection.rollback()
            console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–∫–æ—á–µ–Ω–∞.')
        }
    } finally {
        // ... (–ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è) ...
        if (connection) {
            try {
                await connection.close()
                console.log("–ó'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ.")
            } catch (err) {
                console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è:", err)
            }
        }
    }
}

run()
